{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/blas-ext-base-slast-index-of';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\n\n\n// MAIN //\n\n/**\n* Returns the last index of a search element in a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing a one-dimensional input ndarray, a zero-dimensional ndarray containing the search element, and a zero-dimensional ndarray containing the index from which to begin searching\n* @returns {integer} index\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import slastIndexOf from '@stdlib/blas-ext-base-ndarray-slast-index-of';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var searchElement = scalar2ndarray( 2.0, {\n*     'dtype': 'float32'\n* });\n*\n* var fromIndex = scalar2ndarray( 0, {\n*     'dtype': 'generic'\n* });\n*\n* var v = slastIndexOf( [ x, searchElement, fromIndex ] );\n* // returns 3\n*/\nfunction slastIndexOf( arrays ) {\n\tvar searchElement;\n\tvar fromIndex;\n\tvar stride;\n\tvar offset;\n\tvar idx;\n\tvar N;\n\tvar x;\n\n\tx = arrays[ 0 ];\n\tN = numelDimension( x, 0 );\n\tsearchElement = ndarraylike2scalar( arrays[ 1 ] );\n\tfromIndex = ndarraylike2scalar( arrays[ 2 ] );\n\n\tif ( fromIndex < 0 ) {\n\t\tfromIndex += N;\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex = 0;\n\t\t}\n\t} else if ( fromIndex >= N ) {\n\t\treturn -1;\n\t}\n\tN -= fromIndex;\n\tstride = getStride( x, 0 );\n\toffset = getOffset( x ) + ( stride*fromIndex );\n\n\tidx = strided( N, searchElement, getData( x ), stride, offset );\n\tif ( idx >= 0 ) {\n\t\tidx += fromIndex;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default slastIndexOf;\n"],"names":["slastIndexOf","arrays","searchElement","fromIndex","stride","offset","idx","N","x","numelDimension","ndarraylike2scalar","getStride","getOffset","strided","getData"],"mappings":";;olBA0DA,SAASA,EAAcC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAOJ,GALAA,EAAIP,EAAQ,GACZM,EAAIE,EAAgBD,EAAG,GACvBN,EAAgBQ,EAAoBT,EAAQ,KAC5CE,EAAYO,EAAoBT,EAAQ,KAEvB,GAChBE,GAAaI,GACI,IAChBJ,EAAY,QAEP,GAAKA,GAAaI,EACxB,OAAQ,EAUT,OARAA,GAAKJ,EACLC,EAASO,EAAWH,EAAG,GACvBH,EAASO,EAAWJ,GAAQJ,EAAOD,GAEnCG,EAAMO,EAASN,EAAGL,EAAeY,EAASN,GAAKJ,EAAQC,KAC3C,IACXC,GAAOH,GAEDG,CACR"}